@implements IDisposable
@page "/search"
@inject SearchService SearchService
@rendermode InteractiveServer

<div class="container d-flex align-items-center justify-content-center min-vh-100">
    <div class="w-100" style="max-width: 600px;">
        <h1 class="header">Versio</h1>
        @if (showSettings)
        {
            <div class="d-flex flex-column mb-2 p-4">
                <div class="d-flex justify-content-between mb-2">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input my-auto" type="checkbox" id="inlineCheckbox1" checked @bind-value="SearchService.OldTestamentEnabled" @bind-value:event="oninput" @onchange="SearchRedis" >
                        <label class="form-check-label text-muted my-auto" for="inlineCheckbox1">Old Testament</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input my-auto" type="checkbox" id="inlineCheckbox2" checked @bind-value="SearchService.NewTestamentEnabled" @bind-value:event="oninput" @onchange="SearchRedis" >
                        <label class="form-check-label text-muted" for="inlineCheckbox2">New Testament</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input my-auto" type="checkbox" id="inlineCheckbox3" checked @bind-value="SearchService.BookOfMormonEnabled" @bind-value:event="oninput" @onchange="SearchRedis" >
                        <label class="form-check-label text-muted" for="inlineCheckbox3">Book of Mormon</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input my-auto" type="checkbox" id="inlineCheckbox4" checked @bind-value="SearchService.DoctrineAndCovenantsEnabled" @bind-value:event="oninput" @onchange="SearchRedis" >
                        <label class="form-check-label text-muted" for="inlineCheckbox4">D&C</label>
                    </div>
                </div>
                <div class="d-flex justify-content-between my-2">
                    <div class="text-muted">Max Results</div>
                    <div class="input-group w-25">
                        <select class="form-select" value="@SearchService.MaxResults" @onchange="OnMaxResultsChanged">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                </div>
                <div class="d-flex justify-content-between">
                    <div class="text-muted" type="button" title="Higher threshold means more unrelated/distant results" >Similarity Threshold: @SearchService.Threshold</div>
                    <div class="input-group w-25">
                        <input type="range" class="form-range" min="0" max="2" step="0.01" @bind="SearchService.Threshold" @oninput="OnThresholdChanged" />
                    </div>
                </div>
                <div class="text-muted text-center mt-2">
                    <small>Tip: You can use quotes to search for exact matches (This is case sensitive i.e "The Lord")</small>
                </div>
            </div>
        }
        <div class="d-flex justify-content-between">
            <div class="input-group">
                <input @bind="query" class="form-control" @oninput="OnInputChanged" />
            </div>
            <div class="bi bi-gear my-auto mx-2 fs-3" type="button" @onclick="OnSettingsClicked">
            </div>
        </div>
        <ul class="list-group mt-2" style="max-height: 50vh; overflow:auto;">
            @foreach (var result in results)
            {
                <a href="@GetVerseHyperlink(result)" target="_blank">
                    <li class="list-group-item"><b>@result.BookShortTitle @result.ChapterNumber:@result.VerseNumber</b> @result.ScriptureText</li>
                </a>
            }
        </ul>
        @if (query.Length > 0)
        {
            <div class="text-muted text-center mt-2">
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <small class="text-danger">@errorMessage</small>
                }
                else if (results.Count == 0)
                {
                    <small>No results found.</small>
                }
                else
                {
                    <small>Showing top @results.Count results <a href="https://www.ibm.com/topics/knn" target="_blank">(KNN)</a></small>
                }
            </div>
        }
    </div>
</div>

@code {
    private string query = "";
    private bool showSettings = false;
    private List<ScriptureResult> results = new List<ScriptureResult>();
    private Timer? debounceTimer;
    private readonly int debounceDelay = 500; // Delay in milliseconds
    private string errorMessage = "";


    private void OnInputChanged(ChangeEventArgs e)
    {
        query = e.Value.ToString();
        debounceTimer?.Change(debounceDelay, Timeout.Infinite);
    }

    private async Task OnMaxResultsChanged(ChangeEventArgs e)
    {
        SearchService.MaxResults = Convert.ToInt32(e.Value);
        await SearchRedis();
    }

    private async void DebouncedSearch(object state)
    {
        await InvokeAsync(async () =>
        {
            await SearchRedis();
            StateHasChanged();
        });
    }

    private async Task OnThresholdChanged(ChangeEventArgs e)
    {
        SearchService.Threshold = Convert.ToDouble(e.Value);
        debounceTimer?.Change(debounceDelay, Timeout.Infinite);
    }

    private async Task SearchRedis()
    {
        errorMessage = "";
        if (string.IsNullOrWhiteSpace(query))
        {
            results.Clear();
            StateHasChanged();
            return;
        }
        try
        {
            results = await SearchService.SearchAsync(query);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
        StateHasChanged();
    }

    private void OnSettingsClicked()
    {
        showSettings = !showSettings;
    }

    private string GetVerseHyperlink(ScriptureResult result)
    {
        var url = $"https://www.churchofjesuschrist.org/study/scriptures/{result.VolumeLdsUrl}/{result.BookLdsUrl}/{result.ChapterNumber}?id=p{result.VerseNumber}#p{result.VerseNumber}";
        return url; 
    }

    protected override void OnInitialized()
    {
        debounceTimer = new Timer(DebouncedSearch, null, Timeout.Infinite, Timeout.Infinite);
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}
